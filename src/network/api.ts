/* tslint:disable */
/* eslint-disable */
/**
 * FastAPI
 * No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import type { Configuration } from './configuration';
import type { AxiosPromise, AxiosInstance, RawAxiosRequestConfig } from 'axios';
import globalAxios from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
import type { RequestArgs } from './base';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, BaseAPI, RequiredError, operationServerMap } from './base';

/**
 * 
 * @export
 * @interface HTTPValidationError
 */
export interface HTTPValidationError {
    /**
     * 
     * @type {Array<ValidationError>}
     * @memberof HTTPValidationError
     */
    'detail'?: Array<ValidationError>;
}
/**
 * Standardized model variant enumeration
 * @export
 * @enum {string}
 */

export const MLPipelineEnum = {
    DummyMockFailureV1: 'dummy_mock_failure_v1',
    DummyMockOutputV1: 'dummy_mock_output_v1',
    CosmosTextToVideoV1: 'cosmos_text_to_video_v1',
    CosmosImageToVideoV1: 'cosmos_image_to_video_v1',
    CosmosVideoToVideoV1: 'cosmos_video_to_video_v1',
    BytedanceLipSyncV1: 'bytedance_lip_sync_v1',
    FluxTextToImageV1: 'flux_text_to_image_v1',
    MmaudioSoundEffectV1: 'mmaudio_sound_effect_v1',
    SkyreelsTextToVideoV1: 'skyreels_text_to_video_v1',
    SkyreelsImageToVideoV1: 'skyreels_image_to_video_v1',
    MusicgptTextToMusicV1: 'musicgpt_text_to_music_v1'
} as const;

export type MLPipelineEnum = typeof MLPipelineEnum[keyof typeof MLPipelineEnum];


/**
 * Structured task information model
 * @export
 * @interface TaskInfo
 */
export interface TaskInfo {
    /**
     * 
     * @type {string}
     * @memberof TaskInfo
     */
    'task_id'?: string;
    /**
     * 
     * @type {MLPipelineEnum}
     * @memberof TaskInfo
     */
    'ml_pipeline': MLPipelineEnum;
    /**
     * 
     * @type {TaskStatus}
     * @memberof TaskInfo
     */
    'status': TaskStatus;
    /**
     * 
     * @type {number}
     * @memberof TaskInfo
     */
    'created_at'?: number;
    /**
     * 
     * @type {number}
     * @memberof TaskInfo
     */
    'started_at'?: number | null;
    /**
     * 
     * @type {number}
     * @memberof TaskInfo
     */
    'finished_at'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TaskInfo
     */
    'error'?: string | null;
    /**
     * 
     * @type {object}
     * @memberof TaskInfo
     */
    'error_detail'?: object | null;
    /**
     * 
     * @type {number}
     * @memberof TaskInfo
     */
    'progress'?: number | null;
    /**
     * 
     * @type {string}
     * @memberof TaskInfo
     */
    'progress_message'?: string | null;
}


/**
 * 
 * @export
 * @interface TaskListResponse
 */
export interface TaskListResponse {
    /**
     * 
     * @type {Array<string>}
     * @memberof TaskListResponse
     */
    'tasks': Array<string>;
}
/**
 * 
 * @export
 * @enum {string}
 */

export const TaskStatus = {
    Pending: 'pending',
    Processing: 'processing',
    Completed: 'completed',
    Failed: 'failed',
    Canceled: 'canceled'
} as const;

export type TaskStatus = typeof TaskStatus[keyof typeof TaskStatus];


/**
 * 
 * @export
 * @interface ValidationError
 */
export interface ValidationError {
    /**
     * 
     * @type {Array<ValidationErrorLocInner>}
     * @memberof ValidationError
     */
    'loc': Array<ValidationErrorLocInner>;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'msg': string;
    /**
     * 
     * @type {string}
     * @memberof ValidationError
     */
    'type': string;
}
/**
 * 
 * @export
 * @interface ValidationErrorLocInner
 */
export interface ValidationErrorLocInner {
}

/**
 * DefaultApi - axios parameter creator
 * @export
 */
export const DefaultApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * 
         * @summary Delete Task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask: async (taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('deleteTask', 'taskId', taskId)
            const localVarPath = `/api/v1/tasks/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'DELETE', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Download Task File
         * @param {string} taskId 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTaskFile: async (taskId: string, filename: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('downloadTaskFile', 'taskId', taskId)
            // verify required parameter 'filename' is not null or undefined
            assertParamExists('downloadTaskFile', 'filename', filename)
            const localVarPath = `/api/v1/tasks/{task_id}/files/{filename}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)))
                .replace(`{${"filename"}}`, encodeURIComponent(String(filename)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 获取任务状态信息，自动检测任务所在目录（waiting/finished）  响应字段说明： - task_id: 任务唯一标识 - status: 任务状态（PENDING/PROCESSING/COMPLETED/FAILED） - created_at: 任务创建时间戳 - started_at: 任务开始处理时间戳（处理中/完成/失败时存在） - finished_at: 任务完成时间戳（完成/失败时存在） - error: 错误信息（仅失败状态存在）
         * @summary Get Task Status
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatus: async (taskId: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'taskId' is not null or undefined
            assertParamExists('getTaskStatus', 'taskId', taskId)
            const localVarPath = `/api/v1/tasks/{task_id}`
                .replace(`{${"task_id"}}`, encodeURIComponent(String(taskId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Image To Video Task
         * @param {string} prompt 
         * @param {File} imageFile 上传的图片文件（最大25MB）
         * @param {string} [negitivePrompt] 
         * @param {InvokeImageToVideoAspectRatioEnum} [aspectRatio] 
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeImageToVideo: async (prompt: string, imageFile: File, negitivePrompt?: string, aspectRatio?: InvokeImageToVideoAspectRatioEnum, mlPipeline?: MLPipelineEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prompt' is not null or undefined
            assertParamExists('invokeImageToVideo', 'prompt', prompt)
            // verify required parameter 'imageFile' is not null or undefined
            assertParamExists('invokeImageToVideo', 'imageFile', imageFile)
            const localVarPath = `/api/v1/task/image_to_video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (prompt !== undefined) { 
                localVarFormParams.append('prompt', prompt as any);
            }
    
            if (negitivePrompt !== undefined) { 
                localVarFormParams.append('negitive_prompt', negitivePrompt as any);
            }
    
            if (aspectRatio !== undefined) { 
                localVarFormParams.append('aspect_ratio', aspectRatio as any);
            }
    
            if (mlPipeline !== undefined) { 
                localVarFormParams.append('ml_pipeline', mlPipeline as any);
            }
    
            if (imageFile !== undefined) { 
                localVarFormParams.append('image_file', imageFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Lip Sync Task
         * @param {File} videoFile mp4视频文件（最大25MB）
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {File} [audioFile] wav音频文件（最大25MB）
         * @param {string} [prompt] 
         * @param {string} [emotion] 情感风格，choices&#x3D;[\\\&quot;happy1\\\&quot;, \\\&quot;happy2\\\&quot;, \\\&quot;angry1\\\&quot;, \\\&quot;angry2\\\&quot;, \\\&quot;sad\\\&quot;, \\\&quot;coquettish\\\&quot;]
         * @param {string} [language] 语言，choices&#x3D;[\\\&quot;Chinese\\\&quot;, \\\&quot;English\\\&quot;, \\\&quot;Korean\\\&quot;, \\\&quot;Japanese\\\&quot;]
         * @param {string} [speed] 语速，choices&#x3D;[\\\&quot;slow1\\\&quot;, \\\&quot;slow2\\\&quot;, \\\&quot;fast1\\\&quot;, \\\&quot;fast2\\\&quot;]
         * @param {string} [speaker] 说话人ID,choices&#x3D;[\\\&quot;Indian_women_1\\\&quot;, \\\&quot;Indian_women_2\\\&quot;, \\\&quot;Indian_women_3\\\&quot;, \\\&quot;Indian_man_1\\\&quot;, \\\&quot;Indian_man_2\\\&quot;, \\\&quot;Indian_man_3\\\&quot;]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeLipSync: async (videoFile: File, mlPipeline?: MLPipelineEnum, audioFile?: File, prompt?: string, emotion?: string, language?: string, speed?: string, speaker?: string, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'videoFile' is not null or undefined
            assertParamExists('invokeLipSync', 'videoFile', videoFile)
            const localVarPath = `/api/v1/task/lip_sync`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (mlPipeline !== undefined) { 
                localVarFormParams.append('ml_pipeline', mlPipeline as any);
            }
    
            if (videoFile !== undefined) { 
                localVarFormParams.append('video_file', videoFile as any);
            }
    
            if (audioFile !== undefined) { 
                localVarFormParams.append('audio_file', audioFile as any);
            }
    
            if (prompt !== undefined) { 
                localVarFormParams.append('prompt', prompt as any);
            }
    
            if (emotion !== undefined) { 
                localVarFormParams.append('emotion', emotion as any);
            }
    
            if (language !== undefined) { 
                localVarFormParams.append('language', language as any);
            }
    
            if (speed !== undefined) { 
                localVarFormParams.append('speed', speed as any);
            }
    
            if (speaker !== undefined) { 
                localVarFormParams.append('speaker', speaker as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Sound Effect Task
         * @param {string} prompt 
         * @param {File} videoFile 上传的图片文件（最大25MB）
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeSoundEffect: async (prompt: string, videoFile: File, mlPipeline?: MLPipelineEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prompt' is not null or undefined
            assertParamExists('invokeSoundEffect', 'prompt', prompt)
            // verify required parameter 'videoFile' is not null or undefined
            assertParamExists('invokeSoundEffect', 'videoFile', videoFile)
            const localVarPath = `/api/v1/task/sound_effect`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (prompt !== undefined) { 
                localVarFormParams.append('prompt', prompt as any);
            }
    
            if (mlPipeline !== undefined) { 
                localVarFormParams.append('ml_pipeline', mlPipeline as any);
            }
    
            if (videoFile !== undefined) { 
                localVarFormParams.append('video_file', videoFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Text To Image Task
         * @param {string} prompt 
         * @param {string} [negitivePrompt] 
         * @param {number} [height] 生成图片高度,最大值2048,必须是64的倍数,
         * @param {number} [width] 生成图片宽度,最大值2048,必须是64的倍数
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeTextToImage: async (prompt: string, negitivePrompt?: string, height?: number, width?: number, mlPipeline?: MLPipelineEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prompt' is not null or undefined
            assertParamExists('invokeTextToImage', 'prompt', prompt)
            const localVarPath = `/api/v1/task/text_to_image`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (prompt !== undefined) { 
                localVarFormParams.set('prompt', prompt as any);
            }
    
            if (negitivePrompt !== undefined) { 
                localVarFormParams.set('negitive_prompt', negitivePrompt as any);
            }
    
            if (height !== undefined) { 
                localVarFormParams.set('height', height as any);
            }
    
            if (width !== undefined) { 
                localVarFormParams.set('width', width as any);
            }
    
            if (mlPipeline !== undefined) { 
                localVarFormParams.set('ml_pipeline', mlPipeline as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Text To Music Task
         * @param {string} prompt 
         * @param {InvokeTextToMusicSecsEnum} [secs] 音乐时长（秒）
         * @param {MLPipelineEnum} [mlPipeline] 使用的音乐生成模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeTextToMusic: async (prompt: string, secs?: InvokeTextToMusicSecsEnum, mlPipeline?: MLPipelineEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prompt' is not null or undefined
            assertParamExists('invokeTextToMusic', 'prompt', prompt)
            const localVarPath = `/api/v1/task/text_to_music`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (prompt !== undefined) { 
                localVarFormParams.set('prompt', prompt as any);
            }
    
            if (secs !== undefined) { 
                localVarFormParams.set('secs', secs as any);
            }
    
            if (mlPipeline !== undefined) { 
                localVarFormParams.set('ml_pipeline', mlPipeline as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Text To Video Task
         * @param {string} prompt 
         * @param {string} [negitivePrompt] 
         * @param {InvokeTextToVideoAspectRatioEnum} [aspectRatio] 
         * @param {boolean} [disablePromptUpsampler] 
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeTextToVideo: async (prompt: string, negitivePrompt?: string, aspectRatio?: InvokeTextToVideoAspectRatioEnum, disablePromptUpsampler?: boolean, mlPipeline?: MLPipelineEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prompt' is not null or undefined
            assertParamExists('invokeTextToVideo', 'prompt', prompt)
            const localVarPath = `/api/v1/task/text_to_video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new URLSearchParams();


            if (prompt !== undefined) { 
                localVarFormParams.set('prompt', prompt as any);
            }
    
            if (negitivePrompt !== undefined) { 
                localVarFormParams.set('negitive_prompt', negitivePrompt as any);
            }
    
            if (aspectRatio !== undefined) { 
                localVarFormParams.set('aspect_ratio', aspectRatio as any);
            }
    
            if (disablePromptUpsampler !== undefined) { 
                localVarFormParams.set('disable_prompt_upsampler', disablePromptUpsampler as any);
            }
    
            if (mlPipeline !== undefined) { 
                localVarFormParams.set('ml_pipeline', mlPipeline as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'application/x-www-form-urlencoded';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams.toString();

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary Create Video To Video Task
         * @param {string} prompt 
         * @param {File} videoFile 上传的图片文件（最大25MB）
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeVideoToVideo: async (prompt: string, videoFile: File, mlPipeline?: MLPipelineEnum, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'prompt' is not null or undefined
            assertParamExists('invokeVideoToVideo', 'prompt', prompt)
            // verify required parameter 'videoFile' is not null or undefined
            assertParamExists('invokeVideoToVideo', 'videoFile', videoFile)
            const localVarPath = `/api/v1/task/video_to_video`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;
            const localVarFormParams = new ((configuration && configuration.formDataCtor) || FormData)();


            if (prompt !== undefined) { 
                localVarFormParams.append('prompt', prompt as any);
            }
    
            if (mlPipeline !== undefined) { 
                localVarFormParams.append('ml_pipeline', mlPipeline as any);
            }
    
            if (videoFile !== undefined) { 
                localVarFormParams.append('video_file', videoFile as any);
            }
    
    
            localVarHeaderParameter['Content-Type'] = 'multipart/form-data';
    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = localVarFormParams;

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * 
         * @summary List Tasks
         * @param {TaskStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks: async (status: TaskStatus, options: RawAxiosRequestConfig = {}): Promise<RequestArgs> => {
            // verify required parameter 'status' is not null or undefined
            assertParamExists('listTasks', 'status', status)
            const localVarPath = `/api/v1/tasks`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            if (status !== undefined) {
                localVarQueryParameter['status'] = status;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * DefaultApi - functional programming interface
 * @export
 */
export const DefaultApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = DefaultApiAxiosParamCreator(configuration)
    return {
        /**
         * 
         * @summary Delete Task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async deleteTask(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.deleteTask(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.deleteTask']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Download Task File
         * @param {string} taskId 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async downloadTaskFile(taskId: string, filename: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<any>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.downloadTaskFile(taskId, filename, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.downloadTaskFile']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 获取任务状态信息，自动检测任务所在目录（waiting/finished）  响应字段说明： - task_id: 任务唯一标识 - status: 任务状态（PENDING/PROCESSING/COMPLETED/FAILED） - created_at: 任务创建时间戳 - started_at: 任务开始处理时间戳（处理中/完成/失败时存在） - finished_at: 任务完成时间戳（完成/失败时存在） - error: 错误信息（仅失败状态存在）
         * @summary Get Task Status
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async getTaskStatus(taskId: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.getTaskStatus(taskId, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.getTaskStatus']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Image To Video Task
         * @param {string} prompt 
         * @param {File} imageFile 上传的图片文件（最大25MB）
         * @param {string} [negitivePrompt] 
         * @param {InvokeImageToVideoAspectRatioEnum} [aspectRatio] 
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeImageToVideo(prompt: string, imageFile: File, negitivePrompt?: string, aspectRatio?: InvokeImageToVideoAspectRatioEnum, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeImageToVideo(prompt, imageFile, negitivePrompt, aspectRatio, mlPipeline, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invokeImageToVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Lip Sync Task
         * @param {File} videoFile mp4视频文件（最大25MB）
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {File} [audioFile] wav音频文件（最大25MB）
         * @param {string} [prompt] 
         * @param {string} [emotion] 情感风格，choices&#x3D;[\\\&quot;happy1\\\&quot;, \\\&quot;happy2\\\&quot;, \\\&quot;angry1\\\&quot;, \\\&quot;angry2\\\&quot;, \\\&quot;sad\\\&quot;, \\\&quot;coquettish\\\&quot;]
         * @param {string} [language] 语言，choices&#x3D;[\\\&quot;Chinese\\\&quot;, \\\&quot;English\\\&quot;, \\\&quot;Korean\\\&quot;, \\\&quot;Japanese\\\&quot;]
         * @param {string} [speed] 语速，choices&#x3D;[\\\&quot;slow1\\\&quot;, \\\&quot;slow2\\\&quot;, \\\&quot;fast1\\\&quot;, \\\&quot;fast2\\\&quot;]
         * @param {string} [speaker] 说话人ID,choices&#x3D;[\\\&quot;Indian_women_1\\\&quot;, \\\&quot;Indian_women_2\\\&quot;, \\\&quot;Indian_women_3\\\&quot;, \\\&quot;Indian_man_1\\\&quot;, \\\&quot;Indian_man_2\\\&quot;, \\\&quot;Indian_man_3\\\&quot;]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeLipSync(videoFile: File, mlPipeline?: MLPipelineEnum, audioFile?: File, prompt?: string, emotion?: string, language?: string, speed?: string, speaker?: string, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeLipSync(videoFile, mlPipeline, audioFile, prompt, emotion, language, speed, speaker, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invokeLipSync']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Sound Effect Task
         * @param {string} prompt 
         * @param {File} videoFile 上传的图片文件（最大25MB）
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeSoundEffect(prompt: string, videoFile: File, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeSoundEffect(prompt, videoFile, mlPipeline, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invokeSoundEffect']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Text To Image Task
         * @param {string} prompt 
         * @param {string} [negitivePrompt] 
         * @param {number} [height] 生成图片高度,最大值2048,必须是64的倍数,
         * @param {number} [width] 生成图片宽度,最大值2048,必须是64的倍数
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeTextToImage(prompt: string, negitivePrompt?: string, height?: number, width?: number, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeTextToImage(prompt, negitivePrompt, height, width, mlPipeline, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invokeTextToImage']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Text To Music Task
         * @param {string} prompt 
         * @param {InvokeTextToMusicSecsEnum} [secs] 音乐时长（秒）
         * @param {MLPipelineEnum} [mlPipeline] 使用的音乐生成模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeTextToMusic(prompt: string, secs?: InvokeTextToMusicSecsEnum, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeTextToMusic(prompt, secs, mlPipeline, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invokeTextToMusic']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Text To Video Task
         * @param {string} prompt 
         * @param {string} [negitivePrompt] 
         * @param {InvokeTextToVideoAspectRatioEnum} [aspectRatio] 
         * @param {boolean} [disablePromptUpsampler] 
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeTextToVideo(prompt: string, negitivePrompt?: string, aspectRatio?: InvokeTextToVideoAspectRatioEnum, disablePromptUpsampler?: boolean, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeTextToVideo(prompt, negitivePrompt, aspectRatio, disablePromptUpsampler, mlPipeline, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invokeTextToVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary Create Video To Video Task
         * @param {string} prompt 
         * @param {File} videoFile 上传的图片文件（最大25MB）
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invokeVideoToVideo(prompt: string, videoFile: File, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskInfo>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invokeVideoToVideo(prompt, videoFile, mlPipeline, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.invokeVideoToVideo']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
        /**
         * 
         * @summary List Tasks
         * @param {TaskStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async listTasks(status: TaskStatus, options?: RawAxiosRequestConfig): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<TaskListResponse>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.listTasks(status, options);
            const localVarOperationServerIndex = configuration?.serverIndex ?? 0;
            const localVarOperationServerBasePath = operationServerMap['DefaultApi.listTasks']?.[localVarOperationServerIndex]?.url;
            return (axios, basePath) => createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration)(axios, localVarOperationServerBasePath || basePath);
        },
    }
};

/**
 * DefaultApi - factory interface
 * @export
 */
export const DefaultApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = DefaultApiFp(configuration)
    return {
        /**
         * 
         * @summary Delete Task
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        deleteTask(taskId: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.deleteTask(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Download Task File
         * @param {string} taskId 
         * @param {string} filename 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        downloadTaskFile(taskId: string, filename: string, options?: RawAxiosRequestConfig): AxiosPromise<any> {
            return localVarFp.downloadTaskFile(taskId, filename, options).then((request) => request(axios, basePath));
        },
        /**
         * 获取任务状态信息，自动检测任务所在目录（waiting/finished）  响应字段说明： - task_id: 任务唯一标识 - status: 任务状态（PENDING/PROCESSING/COMPLETED/FAILED） - created_at: 任务创建时间戳 - started_at: 任务开始处理时间戳（处理中/完成/失败时存在） - finished_at: 任务完成时间戳（完成/失败时存在） - error: 错误信息（仅失败状态存在）
         * @summary Get Task Status
         * @param {string} taskId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        getTaskStatus(taskId: string, options?: RawAxiosRequestConfig): AxiosPromise<TaskInfo> {
            return localVarFp.getTaskStatus(taskId, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Image To Video Task
         * @param {string} prompt 
         * @param {File} imageFile 上传的图片文件（最大25MB）
         * @param {string} [negitivePrompt] 
         * @param {InvokeImageToVideoAspectRatioEnum} [aspectRatio] 
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeImageToVideo(prompt: string, imageFile: File, negitivePrompt?: string, aspectRatio?: InvokeImageToVideoAspectRatioEnum, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): AxiosPromise<TaskInfo> {
            return localVarFp.invokeImageToVideo(prompt, imageFile, negitivePrompt, aspectRatio, mlPipeline, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Lip Sync Task
         * @param {File} videoFile mp4视频文件（最大25MB）
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {File} [audioFile] wav音频文件（最大25MB）
         * @param {string} [prompt] 
         * @param {string} [emotion] 情感风格，choices&#x3D;[\\\&quot;happy1\\\&quot;, \\\&quot;happy2\\\&quot;, \\\&quot;angry1\\\&quot;, \\\&quot;angry2\\\&quot;, \\\&quot;sad\\\&quot;, \\\&quot;coquettish\\\&quot;]
         * @param {string} [language] 语言，choices&#x3D;[\\\&quot;Chinese\\\&quot;, \\\&quot;English\\\&quot;, \\\&quot;Korean\\\&quot;, \\\&quot;Japanese\\\&quot;]
         * @param {string} [speed] 语速，choices&#x3D;[\\\&quot;slow1\\\&quot;, \\\&quot;slow2\\\&quot;, \\\&quot;fast1\\\&quot;, \\\&quot;fast2\\\&quot;]
         * @param {string} [speaker] 说话人ID,choices&#x3D;[\\\&quot;Indian_women_1\\\&quot;, \\\&quot;Indian_women_2\\\&quot;, \\\&quot;Indian_women_3\\\&quot;, \\\&quot;Indian_man_1\\\&quot;, \\\&quot;Indian_man_2\\\&quot;, \\\&quot;Indian_man_3\\\&quot;]
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeLipSync(videoFile: File, mlPipeline?: MLPipelineEnum, audioFile?: File, prompt?: string, emotion?: string, language?: string, speed?: string, speaker?: string, options?: RawAxiosRequestConfig): AxiosPromise<TaskInfo> {
            return localVarFp.invokeLipSync(videoFile, mlPipeline, audioFile, prompt, emotion, language, speed, speaker, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Sound Effect Task
         * @param {string} prompt 
         * @param {File} videoFile 上传的图片文件（最大25MB）
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeSoundEffect(prompt: string, videoFile: File, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): AxiosPromise<TaskInfo> {
            return localVarFp.invokeSoundEffect(prompt, videoFile, mlPipeline, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Text To Image Task
         * @param {string} prompt 
         * @param {string} [negitivePrompt] 
         * @param {number} [height] 生成图片高度,最大值2048,必须是64的倍数,
         * @param {number} [width] 生成图片宽度,最大值2048,必须是64的倍数
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeTextToImage(prompt: string, negitivePrompt?: string, height?: number, width?: number, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): AxiosPromise<TaskInfo> {
            return localVarFp.invokeTextToImage(prompt, negitivePrompt, height, width, mlPipeline, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Text To Music Task
         * @param {string} prompt 
         * @param {InvokeTextToMusicSecsEnum} [secs] 音乐时长（秒）
         * @param {MLPipelineEnum} [mlPipeline] 使用的音乐生成模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeTextToMusic(prompt: string, secs?: InvokeTextToMusicSecsEnum, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): AxiosPromise<TaskInfo> {
            return localVarFp.invokeTextToMusic(prompt, secs, mlPipeline, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Text To Video Task
         * @param {string} prompt 
         * @param {string} [negitivePrompt] 
         * @param {InvokeTextToVideoAspectRatioEnum} [aspectRatio] 
         * @param {boolean} [disablePromptUpsampler] 
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeTextToVideo(prompt: string, negitivePrompt?: string, aspectRatio?: InvokeTextToVideoAspectRatioEnum, disablePromptUpsampler?: boolean, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): AxiosPromise<TaskInfo> {
            return localVarFp.invokeTextToVideo(prompt, negitivePrompt, aspectRatio, disablePromptUpsampler, mlPipeline, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary Create Video To Video Task
         * @param {string} prompt 
         * @param {File} videoFile 上传的图片文件（最大25MB）
         * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invokeVideoToVideo(prompt: string, videoFile: File, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig): AxiosPromise<TaskInfo> {
            return localVarFp.invokeVideoToVideo(prompt, videoFile, mlPipeline, options).then((request) => request(axios, basePath));
        },
        /**
         * 
         * @summary List Tasks
         * @param {TaskStatus} status 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        listTasks(status: TaskStatus, options?: RawAxiosRequestConfig): AxiosPromise<TaskListResponse> {
            return localVarFp.listTasks(status, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * DefaultApi - object-oriented interface
 * @export
 * @class DefaultApi
 * @extends {BaseAPI}
 */
export class DefaultApi extends BaseAPI {
    /**
     * 
     * @summary Delete Task
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public deleteTask(taskId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).deleteTask(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Download Task File
     * @param {string} taskId 
     * @param {string} filename 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public downloadTaskFile(taskId: string, filename: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).downloadTaskFile(taskId, filename, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 获取任务状态信息，自动检测任务所在目录（waiting/finished）  响应字段说明： - task_id: 任务唯一标识 - status: 任务状态（PENDING/PROCESSING/COMPLETED/FAILED） - created_at: 任务创建时间戳 - started_at: 任务开始处理时间戳（处理中/完成/失败时存在） - finished_at: 任务完成时间戳（完成/失败时存在） - error: 错误信息（仅失败状态存在）
     * @summary Get Task Status
     * @param {string} taskId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public getTaskStatus(taskId: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).getTaskStatus(taskId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Image To Video Task
     * @param {string} prompt 
     * @param {File} imageFile 上传的图片文件（最大25MB）
     * @param {string} [negitivePrompt] 
     * @param {InvokeImageToVideoAspectRatioEnum} [aspectRatio] 
     * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeImageToVideo(prompt: string, imageFile: File, negitivePrompt?: string, aspectRatio?: InvokeImageToVideoAspectRatioEnum, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeImageToVideo(prompt, imageFile, negitivePrompt, aspectRatio, mlPipeline, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Lip Sync Task
     * @param {File} videoFile mp4视频文件（最大25MB）
     * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
     * @param {File} [audioFile] wav音频文件（最大25MB）
     * @param {string} [prompt] 
     * @param {string} [emotion] 情感风格，choices&#x3D;[\\\&quot;happy1\\\&quot;, \\\&quot;happy2\\\&quot;, \\\&quot;angry1\\\&quot;, \\\&quot;angry2\\\&quot;, \\\&quot;sad\\\&quot;, \\\&quot;coquettish\\\&quot;]
     * @param {string} [language] 语言，choices&#x3D;[\\\&quot;Chinese\\\&quot;, \\\&quot;English\\\&quot;, \\\&quot;Korean\\\&quot;, \\\&quot;Japanese\\\&quot;]
     * @param {string} [speed] 语速，choices&#x3D;[\\\&quot;slow1\\\&quot;, \\\&quot;slow2\\\&quot;, \\\&quot;fast1\\\&quot;, \\\&quot;fast2\\\&quot;]
     * @param {string} [speaker] 说话人ID,choices&#x3D;[\\\&quot;Indian_women_1\\\&quot;, \\\&quot;Indian_women_2\\\&quot;, \\\&quot;Indian_women_3\\\&quot;, \\\&quot;Indian_man_1\\\&quot;, \\\&quot;Indian_man_2\\\&quot;, \\\&quot;Indian_man_3\\\&quot;]
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeLipSync(videoFile: File, mlPipeline?: MLPipelineEnum, audioFile?: File, prompt?: string, emotion?: string, language?: string, speed?: string, speaker?: string, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeLipSync(videoFile, mlPipeline, audioFile, prompt, emotion, language, speed, speaker, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Sound Effect Task
     * @param {string} prompt 
     * @param {File} videoFile 上传的图片文件（最大25MB）
     * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeSoundEffect(prompt: string, videoFile: File, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeSoundEffect(prompt, videoFile, mlPipeline, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Text To Image Task
     * @param {string} prompt 
     * @param {string} [negitivePrompt] 
     * @param {number} [height] 生成图片高度,最大值2048,必须是64的倍数,
     * @param {number} [width] 生成图片宽度,最大值2048,必须是64的倍数
     * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeTextToImage(prompt: string, negitivePrompt?: string, height?: number, width?: number, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeTextToImage(prompt, negitivePrompt, height, width, mlPipeline, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Text To Music Task
     * @param {string} prompt 
     * @param {InvokeTextToMusicSecsEnum} [secs] 音乐时长（秒）
     * @param {MLPipelineEnum} [mlPipeline] 使用的音乐生成模型变体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeTextToMusic(prompt: string, secs?: InvokeTextToMusicSecsEnum, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeTextToMusic(prompt, secs, mlPipeline, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Text To Video Task
     * @param {string} prompt 
     * @param {string} [negitivePrompt] 
     * @param {InvokeTextToVideoAspectRatioEnum} [aspectRatio] 
     * @param {boolean} [disablePromptUpsampler] 
     * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeTextToVideo(prompt: string, negitivePrompt?: string, aspectRatio?: InvokeTextToVideoAspectRatioEnum, disablePromptUpsampler?: boolean, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeTextToVideo(prompt, negitivePrompt, aspectRatio, disablePromptUpsampler, mlPipeline, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary Create Video To Video Task
     * @param {string} prompt 
     * @param {File} videoFile 上传的图片文件（最大25MB）
     * @param {MLPipelineEnum} [mlPipeline] 使用的模型变体
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public invokeVideoToVideo(prompt: string, videoFile: File, mlPipeline?: MLPipelineEnum, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).invokeVideoToVideo(prompt, videoFile, mlPipeline, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * 
     * @summary List Tasks
     * @param {TaskStatus} status 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof DefaultApi
     */
    public listTasks(status: TaskStatus, options?: RawAxiosRequestConfig) {
        return DefaultApiFp(this.configuration).listTasks(status, options).then((request) => request(this.axios, this.basePath));
    }
}

/**
 * @export
 */
export const InvokeImageToVideoAspectRatioEnum = {
    _169: '16:9',
    _916: '9:16',
    _11: '1:1'
} as const;
export type InvokeImageToVideoAspectRatioEnum = typeof InvokeImageToVideoAspectRatioEnum[keyof typeof InvokeImageToVideoAspectRatioEnum];
/**
 * @export
 */
export const InvokeTextToMusicSecsEnum = {
    _5: '5',
    _10: '10',
    _15: '15',
    _20: '20'
} as const;
export type InvokeTextToMusicSecsEnum = typeof InvokeTextToMusicSecsEnum[keyof typeof InvokeTextToMusicSecsEnum];
/**
 * @export
 */
export const InvokeTextToVideoAspectRatioEnum = {
    _169: '16:9',
    _916: '9:16',
    _11: '1:1'
} as const;
export type InvokeTextToVideoAspectRatioEnum = typeof InvokeTextToVideoAspectRatioEnum[keyof typeof InvokeTextToVideoAspectRatioEnum];


